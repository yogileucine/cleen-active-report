{"uid":"ddb9a29092df1d94","name":"Test SAL of Production(API) for All Criteria & Upper limit in API Facility","fullName":"tests.scenarios.test_limit_productions.TestLimitOnProduction#test_validate_api_production_sal_upper_limit_all_criteria","historyId":"49075315e629c91f69d6f88b2cf3cf86","time":{"start":1684996846794,"stop":1684996848963,"duration":2169},"description":"This test case tests api Production wise SAL when Upper Limit on SAL is True for All Criteria in Policy is selected for each Equipment mapped to Production","descriptionHtml":"<p>This test case tests api Production wise SAL when Upper Limit on SAL is True for All Criteria in Policy is selected for each Equipment mapped to Production</p>\n","status":"failed","statusMessage":"AssertionError: DAPR009 1.5625e-07 Not Equal 1e-09","statusTrace":"self = <test_limit_productions.TestLimitOnProduction object at 0x0000018202B41590>\n\n    @allure.title(\"Test SAL of Production(API) for All Criteria & Upper limit in API Facility\")\n    @allure.description(\"This test case tests api Production wise SAL when Upper Limit on SAL is True for\"\n                        \" All Criteria in Policy is selected for each Equipment mapped to Production\")\n    @allure.link(\"https://app.clickup.com/t/2uayp19\")\n    @pytest.mark.active\n    @pytest.mark.validate_api_production_sal_upper_limit_all_criteria\n    def test_validate_api_production_sal_upper_limit_all_criteria(self):\n        upper_limit_sal = Excel.read_excel_col_name_row_number(const.get_master_data(),\n                                                               \"config\", \"upper_limit\", 2)\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useARL\": True, \"useLd50\": True, \"useResidueLimit\": True,\n                       \"residueLimit\": upper_limit_sal}\n        data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"] or upper_limit_sal != policy_data[\"residueLimit\"]:\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n    \n        production_id = PRODUCTION_LIST[\"api_production_id\"]\n        for prod in production_id:\n            data.update({\"production\": prod})\n            sheet_name = prod.lower()\n            columns = [\"Equipment ID\", \"upperlimit_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.calculated_sal_excel(sheet_name, columns)\n            data.update({\"production\": prod})\n            sal = self.get_production.get_production_sal_each_equipment(data)\n            lowest_sal = self.get_production.get_production_lowest_sal(data)\n>           compare_sal(sal, manually_calculated_limit, columns, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_limit_productions.py:800: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:17: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 1.5625e-07, sal2 = 1e-09, error_message = 'DAPR009'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n>               assert sal1 == sal2, error_message + \" \" + str(sal1) + \" Not Equal \" + str(sal2)\nE               AssertionError: DAPR009 1.5625e-07 Not Equal 1e-09\n\nutil\\common_methods.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1684996693220,"stop":1684996694954,"duration":1734},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"get_facility","time":{"start":1684996694954,"stop":1684996696738,"duration":1784},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"load_env","time":{"start":1684996696738,"stop":1684996696738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"This method will setup the cleaning limit policy for actives","time":{"start":1684996797691,"stop":1684996804852,"duration":7161},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_api_production_sal_upper_limit_all_criteria"},{"name":"tag","value":"active"},{"name":"tag","value":"production_limits"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_productions"},{"name":"subSuite","value":"TestLimitOnProduction"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"21340-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_productions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2uayp19","url":"https://app.clickup.com/t/2uayp19","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"49b85dd4e289a5f1","status":"skipped","statusDetails":"Skipped: test case for formulation only","time":{"start":1684995087099,"stop":1684995087099,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","active","production_limits","validate_api_production_sal_upper_limit_all_criteria"]},"source":"ddb9a29092df1d94.json","parameterValues":[]}