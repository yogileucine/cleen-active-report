{"uid":"55fcf3a63b313c5b","name":"Test Equipment wise SAL for Default Criteria","fullName":"tests.scenarios.test_limit_productions.TestLimitOnProduction#test_validate_formulation_production_sal_equipmentwise_default","historyId":"9fa2c9ebc99675ad75021a6b330d530d","time":{"start":1690873372216,"stop":1690873375328,"duration":3112},"description":"This test case tests Equipment wise SAL when Default Criteria in Policy is selected for each Equipment mapped to Production","descriptionHtml":"<p>This test case tests Equipment wise SAL when Default Criteria in Policy is selected for each Equipment mapped to Production</p>\n","status":"failed","statusMessage":"AssertionError: 419","statusTrace":"self = <test_limit_productions.TestLimitOnProduction object at 0x0000014E7EAB1C50>\n\n    @allure.title(\"Test Equipment wise SAL for Default Criteria\")\n    @allure.description(\"This test case tests Equipment wise SAL when Default Criteria in Policy is selected\"\n                        \" for each Equipment mapped to Production\")\n    @allure.link(\"https://app.clickup.com/t/2rbyrtr\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_formulation_production_sal_equipmentwise_default\n    def test_validate_formulation_production_sal_equipmentwise_default(self):\n        policy_data = {\"useDosage\": False, \"useToxicity\": False, \"useProductLimit\": False, \"useARL\": True}\n        data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"]:\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n    \n        production_id = PRODUCTION_LIST[\"production_id\"]\n        for prod in production_id:\n            data.update({\"production\": prod})\n            sheet_name = prod.lower() + \"_equipmentwise_sal\"\n            columns = [\"Equipment ID\", \"sal_default_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.calculated_sal_excel(sheet_name, columns)\n            data.update({\"production\": prod})\n>           sal = self.get_production.get_production_sal_each_equipment(data)\n\ntests\\scenarios\\test_limit_productions.py:353: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\production\\test_production.py:91: in get_production_sal_each_equipment\n    production_details = self.test_get_production(data)[\"response\"]\ntests\\unit\\production\\test_production.py:68: in test_get_production\n    production_data = self.find_production_data(total_page, production_id)\ntests\\unit\\production\\test_production.py:43: in find_production_data\n    response = self.test_get_productions(data)[\"response\"]\ntests\\unit\\production\\test_production.py:54: in test_get_productions\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [419]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: 419\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1690873278474,"stop":1690873278842,"duration":368},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_facility","time":{"start":1690873278843,"stop":1690873279612,"duration":769},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"load_env","time":{"start":1690873279612,"stop":1690873279613,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"This method will setup the cleaning limit policy for actives","time":{"start":1690873338668,"stop":1690873342104,"duration":3436},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_production_sal_equipmentwise_default"},{"name":"tag","value":"formulation"},{"name":"tag","value":"production_limits"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_productions"},{"name":"subSuite","value":"TestLimitOnProduction"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"20900-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_productions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2rbyrtr","url":"https://app.clickup.com/t/2rbyrtr","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_formulation_production_sal_equipmentwise_default","scenario","formulation","production_limits"]},"source":"55fcf3a63b313c5b.json","parameterValues":[]}