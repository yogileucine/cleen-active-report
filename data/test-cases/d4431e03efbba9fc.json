{"uid":"d4431e03efbba9fc","name":"Test ProductWise Upper Limit SAL of Productions on Equipments","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_formulation_equipment_productwise_upper_limit","historyId":"61737d277d043f6420b84cf70d03ade5","time":{"start":1690873222447,"stop":1690873222789,"duration":342},"description":"This test case tests Production wise SAL when Upper Limit is True for All Criteria in Policy is selected for each Production mapped to Equipment","descriptionHtml":"<p>This test case tests Production wise SAL when Upper Limit is True for All Criteria in Policy is selected for each Production mapped to Equipment</p>\n","status":"failed","statusMessage":"AssertionError: 419","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x0000027AB70F2050>\n\n    @allure.title(\"Test ProductWise Upper Limit SAL of Productions on Equipments\")\n    @allure.description(\"This test case tests Production wise SAL when Upper Limit is True for\"\n                        \" All Criteria in Policy is selected for each Production mapped to Equipment\")\n    @allure.link(\"https://app.clickup.com/t/85zrj1tjt\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_formulation_equipment_productwise_upper_limit\n    def test_validate_formulation_equipment_productwise_upper_limit(self):\n        upper_limit = Excel.read_excel_col_name_row_number(const.get_master_data(), \"config\", \"upper_limit\", 2)\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True,\n                       \"useResidueLimit\": True, \"residueLimit\": upper_limit}\n>       get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n\ntests\\scenarios\\test_limit_equipments.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\settings\\cleaning_limit_policies\\test_active_cleaning_limit_policy.py:37: in test_get_active_cleaning_limit_policy\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [419]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: 419\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1690873204089,"stop":1690873204472,"duration":383},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_facility","time":{"start":1690873204472,"stop":1690873205222,"duration":750},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"load_env","time":{"start":1690873205222,"stop":1690873205223,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"This method will setup cleaning limit policy","time":{"start":1690873213532,"stop":1690873216511,"duration":2979},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_equipment_productwise_upper_limit"},{"name":"tag","value":"formulation"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"364-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrj1tjt","url":"https://app.clickup.com/t/85zrj1tjt","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","formulation","validate_formulation_equipment_productwise_upper_limit","limits"]},"source":"d4431e03efbba9fc.json","parameterValues":[]}