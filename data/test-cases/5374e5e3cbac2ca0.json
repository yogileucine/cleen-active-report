{"uid":"5374e5e3cbac2ca0","name":"Test ProductWise Dosage SAL of Productions on Equipments","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_formulation_equipment_sal_productwise_dosage","historyId":"a96f6a664d5158a39631ea8bcfe14a06","time":{"start":1690867805376,"stop":1690867806051,"duration":675},"description":"This test case tests Production wise SAL when Dosage Criteria in Policy is selected for all production mapped to Equipment","descriptionHtml":"<p>This test case tests Production wise SAL when Dosage Criteria in Policy is selected for all production mapped to Equipment</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x0000018831560810>\n\n    @allure.title(\"Test ProductWise Dosage SAL of Productions on Equipments\")\n    @allure.description(\"This test case tests Production wise SAL when Dosage Criteria in Policy is selected\"\n                        \" for all production mapped to Equipment\")\n    @allure.link(\"https://app.clickup.com/t/2te94wr\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_formulation_equipment_productwise_sal_dosage\n    def test_validate_formulation_equipment_sal_productwise_dosage(self):\n        policy_data = {\"useDosage\": True, \"useToxicity\": False, \"useProductLimit\": True, \"useARL\": False}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data = {\"update_policy_payload\": update_policy}\n        if get_policy != update_policy[\"data\"]:\n            self.update_active_policy.test_update_active_policy(data)\n>           self.change_assessment.test_start_cleaning_assessment(scenario=True)\n\ntests\\scenarios\\test_limit_equipments.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:32: in test_start_cleaning_assessment\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1690867795854,"stop":1690867796351,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_facility","time":{"start":1690867796351,"stop":1690867797144,"duration":793},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"load_env","time":{"start":1690867797144,"stop":1690867797144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"This method will setup cleaning limit policy","time":{"start":1690867801772,"stop":1690867803986,"duration":2214},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_equipment_productwise_sal_dosage"},{"name":"tag","value":"formulation"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"18592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2te94wr","url":"https://app.clickup.com/t/2te94wr","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","validate_formulation_equipment_productwise_sal_dosage","formulation","limits"]},"source":"5374e5e3cbac2ca0.json","parameterValues":[]}