{"uid":"88c8cbb3de688a59","name":"Test SAL of Production on Equipments for LD50 Criteria in API Facility","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_api_equipment_sal_ld50","historyId":"b541880bde6dcaa1b7023aca47cea4d9","time":{"start":1690878211041,"stop":1690878211649,"duration":608},"description":"This test case tests SAL when LD50 Criteria in Policy is selected for all production mapped to Equipment in API Facility","descriptionHtml":"<p>This test case tests SAL when LD50 Criteria in Policy is selected for all production mapped to Equipment in API Facility</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x0000023DF2B4A410>\n\n    @allure.title(\"Test SAL of Production on Equipments for LD50 Criteria in API Facility\")\n    @allure.description(\"This test case tests SAL when LD50 Criteria in Policy is selected\"\n                        \" for all production mapped to Equipment in API Facility\")\n    @allure.link(\"https://app.clickup.com/t/85zrj1v0j\")\n    @pytest.mark.validate_api_equipment_sal_ld50\n    @pytest.mark.active\n    @pytest.mark.v41x\n    def test_validate_api_equipment_sal_ld50(self):\n        policy_data = {\"useDosage\": False, \"useToxicity\": False, \"useARL\": False, \"useLd50\": True}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data = {\"update_policy_payload\": update_policy}\n        if get_policy != update_policy[\"data\"]:\n            self.update_active_policy.test_update_active_policy(data)\n>           self.change_assessment.test_start_cleaning_assessment(scenario=True)\n\ntests\\scenarios\\test_limit_equipments.py:587: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:32: in test_start_cleaning_assessment\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1690878202470,"stop":1690878202954,"duration":484},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_facility","time":{"start":1690878202954,"stop":1690878203713,"duration":759},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"load_env","time":{"start":1690878203713,"stop":1690878203713,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"This method will setup cleaning limit policy","time":{"start":1690878207151,"stop":1690878209162,"duration":2011},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"tag","value":"v41x"},{"name":"tag","value":"active"},{"name":"tag","value":"validate_api_equipment_sal_ld50"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"11628-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrj1v0j","url":"https://app.clickup.com/t/85zrj1v0j","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","v41x","active","validate_api_equipment_sal_ld50","limits"]},"source":"88c8cbb3de688a59.json","parameterValues":[]}