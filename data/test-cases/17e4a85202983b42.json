{"uid":"17e4a85202983b42","name":"Test Production wise SAL for Default Criteria","fullName":"tests.scenarios.test_limit_productions.TestLimitOnProduction#test_validate_formulation_production_sal_productwise_default","historyId":"21036c62f98adee16b3fe8d635b26b37","time":{"start":1690867816306,"stop":1690867816306,"duration":0},"description":"This test case tests Production wise SAL when Default Criteria in Policy is selected for each Equipment mapped to Production","descriptionHtml":"<p>This test case tests Production wise SAL when Default Criteria in Policy is selected for each Equipment mapped to Production</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}","statusTrace":"self = <test_limit_productions.TestLimitOnProduction object at 0x000001882FBF3A90>\n\n    @allure.title(\"This method will setup the cleaning limit policy for actives\")\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def setup_production_limits(self):\n        data = {}\n        global PRODUCTION_LIST\n        columns_prod = [\"production_id\", \"api_production_id\", \"intermediate_production_id\"]\n        PRODUCTION_LIST = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        columns = [\"default_unit_name\", \"default_unit\", \"formulation_default_arl\", \"variable_name\", \"variable_value\"]\n    \n        excel_data = Excel.read_excel_columns(const.get_master_data(), \"config\", columns)\n        default_unit_name = excel_data[\"default_unit_name\"]\n        default_unit = excel_data[\"default_unit\"]\n        for (i, j) in zip(default_unit_name, default_unit):\n            data.update({\"default_unit_name\": i})\n            data.update({\"default_unit\": j})\n            self.update_default_unit.test_update_default_unit(data)\n    \n        variable_name = excel_data[\"variable_name\"]\n        variable_value = excel_data[\"variable_value\"]\n        for (i, j) in zip(variable_name, variable_value):\n            data.update({\"variables_name\": i})\n            data.update({\"variable_value\": j})\n            self.update_variable.test_update_variable_value(data)\n    \n        if const.FACILITY_TYPE != \"api\":\n            formulation_default_arl = excel_data[\"formulation_default_arl\"][0]\n            policy_data = {\"arl_value\": formulation_default_arl, \"ignoreCombo\": False,\n                           \"useGlobalRecoveryPercentage\": False, \"salMassUnit\": \"mg\", \"useResidueLimit\": False}\n            data = {}\n            get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n            get_policy = get_policy[\"policy\"]\n            arl_value = get_policy[\"arl\"][\"value\"]\n            sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n            update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n            data.update({\"update_policy_payload\": update_policy})\n    \n            if get_policy != update_policy[\"data\"] or arl_value != formulation_default_arl or sal_unit != \"mg\":\n                self.update_active_policy.test_update_active_policy(data)\n>               self.change_assessment.test_start_cleaning_assessment(scenario=True)\n\ntests\\scenarios\\test_limit_productions.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:32: in test_start_cleaning_assessment\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1690867795854,"stop":1690867796351,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_facility","time":{"start":1690867796351,"stop":1690867797144,"duration":793},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"load_env","time":{"start":1690867797144,"stop":1690867797144,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"This method will setup the cleaning limit policy for actives","time":{"start":1690867813569,"stop":1690867816196,"duration":2627},"status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\",\"message\":\"No production has been provisioned for the current facility. Please add production before performing this step.\",\"action\":\"Start\",\"domain\":\"FacilityCleaningEvaluation\"}}\n","statusTrace":"  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\fixtures.py\", line 908, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\tests\\scenarios\\test_limit_productions.py\", line 77, in setup_production_limits\n    self.change_assessment.test_start_cleaning_assessment(scenario=True)\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\tests\\unit\\change_assessment\\test_cleaning_assessment.py\", line 32, in test_start_cleaning_assessment\n    status_200(response)\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\util\\validate_response.py\", line 3, in status_200\n    assert response.status_code == 200, response.text\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_production_sal_productwise_default"},{"name":"tag","value":"formulation"},{"name":"tag","value":"production_limits"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_productions"},{"name":"subSuite","value":"TestLimitOnProduction"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"18592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_productions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2nggby0","url":"https://app.clickup.com/t/2nggby0","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_formulation_production_sal_productwise_default","scenario","formulation","production_limits"]},"source":"17e4a85202983b42.json","parameterValues":[]}